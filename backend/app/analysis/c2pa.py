"""
C2PA (Coalition for Content Provenance and Authenticity) metadata analyzer.
This module analyzes C2PA metadata in images to detect potential tampering or AI generation.
"""

from typing import Dict, List, Optional, Any, Tuple
from pathlib import Path
import json
import c2pa

class C2PAAnalyzer:
    """Analyzer for C2PA metadata in images."""
    
    def __init__(self):
        """Initialize the C2PA analyzer."""
        self.known_ai_generators = {
            'dalle', 'midjourney', 'stable diffusion', 'openai',
            'adobe firefly', 'imagen', 'deepmind'
        }
        
    def _check_manifest_validity(self, manifest) -> List[Dict[str, Any]]:
        """Check the validity of a C2PA manifest.
        
        Args:
            manifest: The C2PA manifest to check
            
        Returns:
            List of issues found in the manifest
        """
        issues = []
        
        # Check signature validation
        try:
            if not manifest.validate():
                issues.append({
                    'type': 'signature_invalid',
                    'severity': 'high',
                    'description': 'Invalid or missing digital signature',
                    'location': 'manifest.signature'
                })
        except Exception as e:
            issues.append({
                'type': 'signature_validation_error',
                'severity': 'high',
                'description': f'Error validating signature: {str(e)}',
                'location': 'manifest.signature'
            })
            
        return issues

    def _check_ai_generation(self, manifest) -> List[Dict[str, Any]]:
        """Check for indicators of AI generation in the manifest.
        
        Args:
            manifest: The C2PA manifest to check
            
        Returns:
            List of AI-related issues found
        """
        issues = []
        
        # Get manifest data
        manifest_data = manifest.get_active_manifest()
        if not manifest_data:
            return issues
            
        # Check for AI generation indicators
        for claim in manifest_data.get('claims', []):
            # Check software agent
            software = claim.get('software_agent', '').lower()
            for ai_gen in self.known_ai_generators:
                if ai_gen in software:
                    issues.append({
                        'type': 'ai_generated',
                        'severity': 'info',
                        'description': f'Generated by AI tool: {software}',
                        'location': f'manifest.claims.{claim.get("id")}.software_agent'
                    })
                    
            # Check for AI generation assertions
            assertions = claim.get('assertions', [])
            for assertion in assertions:
                if 'ai_generated' in str(assertion).lower():
                    issues.append({
                        'type': 'ai_generated_assertion',
                        'severity': 'info',
                        'description': 'AI generation explicitly declared',
                        'location': f'manifest.claims.{claim.get("id")}.assertions'
                    })
                    
        return issues

    def _extract_metadata(self, manifest) -> Dict[str, Any]:
        """Extract relevant metadata from the manifest.
        
        Args:
            manifest: The C2PA manifest to process
            
        Returns:
            Dictionary containing structured metadata
        """
        manifest_data = manifest.get_active_manifest()
        if not manifest_data:
            return {
                'manifest_version': None,
                'claims': [],
                'provenance': []
            }
            
        return {
            'manifest_version': manifest_data.get('version'),
            'claims': manifest_data.get('claims', []),
            'provenance': manifest_data.get('provenance', [])
        }

    def analyze_image(self, image_path: str) -> Dict[str, Any]:
        """Analyze C2PA metadata in an image and identify potential issues.
        
        Args:
            image_path: Path to the image file to analyze
            
        Returns:
            Dictionary containing:
                - issues: List of potential problems found
                - metadata: Structured C2PA metadata from the image
        """
        try:
            # Check if file exists
            if not Path(image_path).is_file():
                raise FileNotFoundError(f"File not found: {image_path}")
                
            # Check file extension
            if not any(image_path.lower().endswith(ext) for ext in self.get_supported_formats()):
                raise ValueError(f"Unsupported file format: {image_path}")
            
            # Load the manifest using from_file
            reader = c2pa.Reader.from_file(image_path)
            
            # Check if manifest exists
            manifest_data = reader.get_active_manifest()
            if not manifest_data:
                return {
                    'issues': [{
                        'type': 'no_manifest',
                        'severity': 'high',
                        'description': 'No C2PA manifest found in image',
                        'location': 'manifest'
                    }],
                    'metadata': {}
                }
            
            # Collect all issues
            issues = []
            issues.extend(self._check_manifest_validity(reader))
            issues.extend(self._check_ai_generation(reader))
            
            # Extract metadata
            metadata = self._extract_metadata(reader)
            
            return {
                'issues': issues,
                'metadata': metadata
            }
            
        except FileNotFoundError:
            raise
        except ValueError:
            raise
        except Exception as e:
            return {
                'issues': [{
                    'type': 'analysis_error',
                    'severity': 'high',
                    'description': f'Error analyzing C2PA metadata: {str(e)}',
                    'location': 'manifest'
                }],
                'metadata': {}
            }

    def get_supported_formats(self) -> List[str]:
        """Get list of image formats supported by the analyzer.
        
        Returns:
            List of supported file extensions
        """
        return ['.jpg', '.jpeg', '.png', '.tiff', '.webp'] 